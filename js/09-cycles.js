'use strict'

// =============================== while ========================

// let counter = 0;

// while (counter < 10) {
//   // // while (false) {
//       console.log("counter: ", counter);
//     counter += 1;
//   }
//   console.log('counter', counter)

// let clientCounter = 15;
// const maxClient = 30;

// while (clientCounter <= maxClient) {
//   // console.log('clientCounter', clientCounter)
//   clientCounter =+ 1 ; 
// }

// for(let counter = 1; counter < 10; counter += 1){
// console.log('counter', counter)
// } 


const clients = ["Mango", "Poly", "Ajax"];
// console.log('clients length', clients.length)
// console.log(clients[1])
// console.log('clients0', clients0)

for (let i = 0; i < clients.length + 1; i += 1) {
  const element = clients[i];
  console.log( `${i}:${element}`)
}

// =============================== do while ========================

// do {
  //   // console.log("counter: ", counter);
  //   counter += 1;
  // } while (counter < 10);
  // // } while (false)
  
  // let password = "";
  
  // do {
    //   password = prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–Ω–µ–µ 4-—Ö —Å–∏–º–≤–æ–ª–æ–≤", "");
    // } while (password.length < 5);
    
    // console.log("–í–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å: ", password);
    
    
  
    // =============================== for ========================

    // for (initialization; condition; post-expression) {
    //   // statements
    // }

    // i++
    // ++i

//  for (let i = 0; i >= 10; i += 2) {
// console.log('i: =>', i)
//  }

//* =============================== –ó–∞–¥–∞—á–∞ =======================================


// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ prompt –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ –Ω–∞–∂–º–µ—Ç Cancel –∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –æ–±—â–µ–π —Å—É–º–º–µ.

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤ prompt –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –í–≤–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π total.
// –û–ø–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É Cancel –≤ prompt.
// –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –≤–≤–æ–¥ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É Cancel, –ø–æ–∫–∞–∑–∞—Ç—å alert —Å–æ —Å—Ç—Ä–æ–∫–æ–π '–û–±—â–∞—è —Å—É–º–º–∞ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞ [—Å—É–º–º–∞]'.
// üîî –î–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ, –∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –Ω—É–∂–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–π alert —Å —Ç–µ–∫—Å—Ç–æ–º '–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', –ø—Ä–∏ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç prompt –ø–ª—é—Å–æ–≤–∞—Ç—å –∫ –æ–±—â–µ–π —Å—É–º–º–µ –Ω–µ –Ω—É–∂–Ω–æ, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ prompt.

// let input;
// let total = 0;

 



let input = 1;
let total = 0;

// 1. prompt –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±–∏ –æ–Ω –≤–≤–µ–ª —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Å–ª–æ

// for(let i=0; i >= ; i += 1){
//   if(input){

//   input = Number(prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"));}
//   if(Number.isNaN(input)){
//     alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!!!")
//   }
//   total += input
// }
// console.log(total);


// while (input !== null) {
//   input = Number(prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ :"));
//    if(input !== null){

//     if(Number.isNaN(input)){
//       alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!!!")
//     }else{
//       total += input;
//     }
//     // console.log(total);
//   }
  
//   // console.log('input', input)
//   }
//   alert(`–û–±—â–∞—è —Å—É–º–º–∞ ${total} `)

// console.log(total);

// do {
//   input = Number(prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"));
  
//   if(Number.isNaN(input)){
//     alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!!!")
//   }
//   total += input;
//   console.log(total);
// } while (input);


// console.log('input', input)


// for (let index = 1; index <= 10 ; index+=1) {

//   console.log('index', index)
// }